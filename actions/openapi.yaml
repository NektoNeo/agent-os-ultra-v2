openapi: 3.1.0
info:
  title: Agent-OS Ultra v2 API
  version: "3.1.0"
servers:
  - url: https://core.neo.ngrok.app
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
paths:
  /health: { get: { summary: Health, x-openai-isConsequential: false, responses: { "200": { description: OK } } } }
  /shortcuts: { get: { summary: List Shortcuts, x-openai-isConsequential: false, responses: { "200": { description: OK } } } }
  /run_shortcut: { post: { summary: Run Shortcut, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [name], properties: { name: {type: string}, input: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /open_app: { post: { summary: Open App, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [name], properties: { name: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /activate_app: { post: { summary: Activate App, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [name], properties: { name: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /open_url: { post: { summary: Open URL, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [url], properties: { url: {type: string, format: uri}, app: {type: string, default: Safari} } } } } }, responses: { "200": { description: OK } } } }
  /keystroke: { post: { summary: Send Keystroke, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [keys], properties: { keys: {type: string}, mods: {type: array, items: {type: string, enum: [command, shift, option, control]}} } } } } }, responses: { "200": { description: OK } } } }
  /keycode: { post: { summary: Send Keycode, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [code], properties: { code: {type: integer}, mods: {type: array, items: {type: string, enum: [command, shift, option, control]}} } } } } }, responses: { "200": { description: OK } } } }
  /applescript/run: { post: { summary: Run AppleScript, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [script], properties: { script: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /jxa/run: { post: { summary: Run JXA, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [script], properties: { script: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /clipboard/get: { get: { summary: Clipboard get, x-openai-isConsequential: false, responses: { "200": { description: OK } } } }
  /clipboard/set: { post: { summary: Clipboard set, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [text], properties: { text: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /screen/capture: { post: { summary: Screen capture, x-openai-isConsequential: false, responses: { "200": { description: OK } } } }
  /fs/read: { post: { summary: FS read, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [path], properties: { path: {type: string}, max_bytes: {type: integer, default: 750000} } } } } }, responses: { "200": { description: OK } } } }
  /fs/write: { post: { summary: FS write, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [path,content], properties: { path: {type: string}, content: {type: string}, mode: {type: string, enum: [w,a], default: w} } } } } }, responses: { "200": { description: OK } } } }
  /fs/mkdir: { post: { summary: FS mkdir, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [path], properties: { path: {type: string}, exist_ok: {type: boolean, default: true} } } } } }, responses: { "200": { description: OK } } } }
  /fs/list: { post: { summary: FS list, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [path], properties: { path: {type: string}, recursive: {type: boolean, default: true} } } } } }, responses: { "200": { description: OK } } } }
  /fs/archive: { post: { summary: FS archive, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [path], properties: { path: {type: string}, format: {type: string, enum: [zip, tar], default: zip} } } } } }, responses: { "200": { description: OK } } } }
  /exec/start: { post: { summary: Exec start, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [cmd], properties: { cmd: {type: string}, cwd: {type: string}, env: {type: object} } } } } }, responses: { "200": { description: OK } } } }
  /exec/status: { get: { summary: Exec status, x-openai-isConsequential: false, parameters: [ {in: query, name: job_id, required: true, schema: {type: string}} ], responses: { "200": { description: OK } } } }
  /exec/logs: { get: { summary: Exec logs, x-openai-isConsequential: false, parameters: [ {in: query, name: job_id, required: true, schema: {type: string}}, {in: query, name: tail, required: false, schema: {type: integer, default: 4000}} ], responses: { "200": { description: OK } } } }
  /exec/stop: { post: { summary: Exec stop, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [job_id], properties: { job_id: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /git/clone: { post: { summary: Git clone, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [repo], properties: { repo: {type: string}, dest: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /git/status: { post: { summary: Git status, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [path], properties: { path: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /git/branch: { post: { summary: Git branch/create/show, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [path], properties: { path: {type: string}, name: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /git/checkout: { post: { summary: Git checkout, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [path], properties: { path: {type: string}, name: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /git/commit: { post: { summary: Git commit all, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [path,message], properties: { path: {type: string}, message: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /git/pull: { post: { summary: Git pull, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [path], properties: { path: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /git/push: { post: { summary: Git push, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [path], properties: { path: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /browser/scrape: { post: { summary: Playwright scrape, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [url], properties: { url: {type: string}, screenshot: {type: boolean}, wait_ms: {type: integer}, selector: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /browser/crawl: { post: { summary: Crawl site, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [start_url], properties: { start_url: {type: string}, max_pages: {type: integer, default: 30}, max_depth: {type: integer, default: 2}, same_host: {type: boolean, default: true} } } } } }, responses: { "200": { description: OK } } } }
  /extract/tabular: { post: { summary: Extract tables, x-openai-isConsequential: false, requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { html: {type: string}, url: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /notify/show: { post: { summary: macOS notification, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [text], properties: { title: {type: string, default: "Agent-OS"}, text: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /vision/locate_text: { post: { summary: OCR locate text and (optional) click, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [text], properties: { text: {type: string}, lang: {type: string, default: "eng"}, click: {type: boolean, default: false} } } } } }, responses: { "200": { description: OK } } } }
  /vision/locate_template: { post: { summary: Find template on screen and (optional) click, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { template_b64: {type: string}, template_path: {type: string}, threshold: {type: number, default: 0.85}, click: {type: boolean, default: false} } } } } }, responses: { "200": { description: OK } } } }
  /vision/click_at: { post: { summary: Click at coordinates (cliclick), x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [x,y], properties: { x: {type: integer}, y: {type: integer} } } } } }, responses: { "200": { description: OK } } } }
  /audio/tts: { post: { summary: Text-to-Speech via macOS say, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [text], properties: { text: {type: string}, voice: {type: string}, rate: {type: integer} } } } } }, responses: { "200": { description: OK } } } }
  /audio/stt: { post: { summary: Speech-to-Text via local Whisper or OpenAI, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object, required: [path], properties: { path: {type: string}, use_api: {type: boolean, default: false}, lang: {type: string} } } } } }, responses: { "200": { description: OK } } } }
  /figma/spec:
    get: { summary: Get Figma spec, x-openai-isConsequential: false, responses: { "200": { description: OK } } }
    put: { summary: Put Figma spec, x-openai-isConsequential: false, requestBody: { required: true, content: { application/json: { schema: { type: object } } } }, responses: { "200": { description: OK } } }
